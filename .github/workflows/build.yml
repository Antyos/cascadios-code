# This is a basic workflow to help you get started with Actions

name: Build-Font

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  get_version:
    name: Get the CalVer version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.calver.outputs.calver }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all tags
          
      - name: Get CalVer version
        id: calver
        run: |
          # Generate current date in CalVer format (YY0M.0D)
          CURRENT_DATE=$(date +"%y%m.%d")
          
          # Get all existing tags for today's date pattern
          EXISTING_TAGS=$(git tag -l "v${CURRENT_DATE}.*" | sort -V)
          
          # Determine the next micro version
          if [ -z "$EXISTING_TAGS" ]; then
            # No tags for today, start with .0
            MICRO=0
          else
            # Get the highest micro version for today
            LATEST_TAG=$(echo "$EXISTING_TAGS" | tail -n 1)
            # Extract micro version (everything after the last dot)
            CURRENT_MICRO=$(echo "$LATEST_TAG" | sed 's/.*\.//' | sed 's/^v//')
            # Increment micro version
            MICRO=$((CURRENT_MICRO + 1))
          fi
          
          # Create the new version tag
          NEW_VERSION="v${CURRENT_DATE}.${MICRO}"
          
          echo "Current date pattern: ${CURRENT_DATE}"
          echo "Existing tags for today: ${EXISTING_TAGS:-none}"
          echo "Next version: ${NEW_VERSION}"
          
          # Output the version (without 'v' prefix for consistency with downstream jobs)
          echo "calver=${NEW_VERSION#v}" >> $GITHUB_OUTPUT


  # Build font (Same as .azure-pipelines.yml)
  build:
    name: Build Font
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
      
      - name: Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ttfautohint
          pip install -r requirements.txt ufolint
          
      - name: Lint sources
        run: ufolint sources/*.ufo
      
      # Build fonts with:
      #   - Web fonts
      #   - No mono fonts (the whole point of this is having custom ligatures)
      #   - Variable fonts only
      - name: Build fonts
        run: python ./build.py -W -M

      - name: Rename fonts
        run: |
          cd build
          for f in $(find . -type f \( -name "*.ttf" -o -name "*.otf" \)); do
            # Dump font to XML
            ttx -o "${f}.ttx" "$f"
            # Remove the trademark line before the next replacement
            sed -i 's/Cascadia Code is a .*/ /g' "${f}.ttx"
            # Replace family and full name in the XML
            sed -i 's/Cascadia *Code/Cascadios/g' "${f}.ttx"
            # Rebuild font from XML
            ttx -f -o "$f" "${f}.ttx"
            rm "${f}.ttx"
          done
          cd ..

      - name: Rename files to Cascadios
        run: |
          cd build
          find . -type f -name "*CascadiaCode*" | while read f; do
            mv "$f" "$(echo $f | sed 's/CascadiaCode/Cascadios/g')";
          done
          cd ..

      - name: Regenerate WOFF2 files from patched TTF/OTF
        run: |
          cd build
          rm -r woff2
          for f in ttf/*.ttf; do
            pyftsubset "$f" --flavor=woff2 --output-file="${f%.*}.woff2" --with-zopfli --layout-features='*' --glyphs='*'
          done
          mkdir woff2
          mv ttf/*.woff2 woff2/
          cd ../..

      - name: Upload font artifact
        uses: actions/upload-artifact@v4
        with:
          name: Cascadios
          path: build/
  


  publish:
    name: Publish release of font files
    needs: [ get_version, build ]
    runs-on: ubuntu-latest
    steps:
      - name: Download patched fonts
        uses: actions/download-artifact@v4
        with:
          name: Cascadios
          path: cascadios/
      - name: Zip font files
        run: |
          cd cascadios
          zip -r ../cascadios-${{ needs.get_version.outputs.version }}.zip *
          cd ..

      - name: Create tag
        uses: mathieudutour/github-tag-action@v6.2
        id: tag_version
        with:
          github_token: ${{ github.token }}
          custom_tag: ${{ needs.get_version.outputs.version }}

      - name: Create release
        uses: softprops/action-gh-release@v2.3.2
        # if: startsWith(github.ref, 'refs/tags/')
        with:
          tag_name: ${{ steps.tag_version.outputs.new_tag }}
          files: |
            cascadios-*.zip
